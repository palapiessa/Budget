/** Gets last expenses for each payee **/

SELECT
	e.id, e.payTo, e.expenseDate, a.name
FROM
	expenses e
	INNER JOIN accounts a ON a.ID = e.	payingAccount
GROUP BY
	e.payTo /* chnage this to change the way its returned */
HAVING
	e.expenseDate = MAX(e.expenseDate)
ORDER BY
	e.expenseDate 




/*
THERE IS A LARGE ISSUE DEALING WITH LEDGERS AND EXPENSES
IF AN EXPENSE IS ENTERED WITH AN EXPENSE DATE BEFORE THE LAST ENTERED DATE,
THE VALUES ARE WRONG. POSSIBLE SOLUTION, REBUILD LEDGER TABLE WHEN THE EXPENSE DATE IS BEFORE
THE LAST POSTED DATE.

1) Get a list of expenses from the new expense date to the current date, ordered by date.
2) Get a list of ledgers that tie the list of expenses to the ledgers. (WHERE @expenseID = List(expense ids))
3) Insert new expense first, adding a ledger. 
*/


/** Get last ledger for a specific account, when an expense is entered. **/
SELECT
	led.balanceAfter AS [bA]
FROM
	ledger led
WHERE
	led.accountID = @accountID
GROUP BY
	led.accountID
HAVING
	led.postedDate = MAX(led.postedDate)

/* get last expense id */
SELECT
	e.ID
FROM
	expenses e
WHERE
	e.payingAccount = @accountID
GROUP BY
	e.payingAccount
HAVING
	e.postedDate = MAX(e.postedDate)

/* Add expense and create new ledger */
int balanceAfter = lastLedger.balanceAfter - 

/** TODO : Determine how to display a full ledger in a time frame, with all relevant info **/
// CREATE TABLE IF NOT EXISTS ledger (id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, balanceBefore REAL, balanceAfter REAL, expenseID INTEGER, incomeID INTEGER, accountID INTEGER, postedDate TEXT)

SELECT
	led.id,
	led.balanceBefore AS [bB],
	led.balanceAfter AS [bA],
	e.payTo AS [payee],
	e.amount AS [expenseAmount],
	e.notes AS [notes],
	a.name AS [accountName],
	i.name AS [incomeName],
	i.amount AS [incomeAmount],
	i.postedDate
FROM
	ledger led
	INNER JOIN accounts a ON a.ID = led.accountID
	LEFT OUTER JOIN expenses e ON e.ID = led.expenseID
	LEFT OUTER JOIN income i ON i.ID = led.incomeID
WHERE
	led.postedDate BETWEEN @start and @end -- trim these for just dates